# ------------------------------- start SQLi overview ------------------------------- # 
    # ----- What is SQL Injection?
        A SQL injection attack consists of insertion or “injection” of a SQL query via  the input data from the client to the application. A 
        successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute 
        administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file 
        system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack.


    # ----- What is the danger of SQL injection?
        - Give access to sensitive data that stored in database.
        - Read local file outside www root.
        - Can be used for uploading file.

    
    # ----- Injeection points:
        - GET/POST.
        - Headers.
        - Cookies.
        - etc...

    # ----- Types of SQLi:
        1. Obvious (Error) SQL injection:
            - The penetration tester tries to force the DBMS to output an error and uses that information not perform data exfiltration.
        2. Blind SQL injection:
            - Doesn’t reflect the results of the injection on the output. In this case the penetration tester must find a inference method to 
            exploit the vulnerability.
        3. double-blind SQLi:
            - Time based sql injection.
        4. In-band SQL injection:
            - Leverage the same channel used to inject the SQL code Techniques makes the retrieval of data from the database very powerful 
            thanks to the use of UNION SQL command.

    # ----- SQLi, could it leads to System takeover?
        - SQL injection is just databases, but attacker can takeover operating system using webshell, backdoor and other privilege escalation.
        - SQLMAP has an OS takeover feature that we can use to get access to command shell using SQL injection.
        - Permissions on the server side are important for getting access.
        - Sometimes system takeover is not directed by SQL injection and we are using SQL injection to exploit other vulnerabilities.
        - If SQL can’t directly take the system, we just extract sensitive information and use lateral movement to gain access to 
          the system (Ex: admin password might be the same for his email and the application).

    # ----- Examples on SQL Injection:
        - Example 1:
            In SQL: select id, firstname, lastname from authors If one provided: Firstname: evil'ex and Lastname: Newman the query string becomes:
            select id, firstname, lastname from authors where firstname = 'evil'ex' and lastname ='newman'
            which the database attempts to run as: Incorrect syntax near il' as the database tried to execute evil.
            A safe version of the above SQL statement could be coded in Java as:
                String firstname = req.getParameter("firstname");
                String lastname = req.getParameter("lastname");
                // FIXME: do your own validation to detect attacks
                String query = "SELECT id, firstname, lastname FROM authors WHERE firstname = ? and lastname = ?";
                PreparedStatement pstmt = connection.prepareStatement( query );
                pstmt.setString( 1, firstname );
                pstmt.setString( 2, lastname );
                try
                {
                    ResultSet results = pstmt.execute( );
                }

 

        - Example 2:
            The following C# code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query 
            restricts the items displayed to those where owner matches the user name of the currently-authenticated user.
                string userName = ctx.getAuthenticatedUserName();
                string query = "SELECT * FROM items WHERE owner = "'"
                                + userName + "' AND itemname = '"
                                + ItemName.Text + "'";
                sda = new SqlDataAdapter(query, conn);
                DataTable dt = new DataTable();
                sda.Fill(dt);

                The query that this code intends to execute follows:
                    SELECT * FROM items
                    WHERE owner =
                    AND itemname = ;
                However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, 
                the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name 
                wiley enters the string "name' OR'a'='a" for itemName, then the query becomes the following:
                    SELECT * FROM items
                    WHERE owner = 'wiley'
                    AND itemname = 'name' OR 'a'='a';
                The addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically 
                equivalent to the much simpler query: SELECT * FROM items;
                This simplification of the query allows the attacker to bypass the requirement that the query only return items owned 
                by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.

 

 

            - Example 3:
                This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If 
                an attacker with the user name hacker enters the string "name'); DELETE FROM items; --" for itemName, then the query becomes 
                the following two queries:
                    SELECT * FROM items
                    WHERE owner = 'hacker'
                    AND itemname = 'name';
                    DELETE FROM items;
                    --'
                    Many database servers, including Microsoft® SQL Server 2000, allow multiple SQL statements separated by semicolons to be 
                    executed at once. While this attack string results in an error in Oracle and other database servers that do not allow 
                    the batch-execution of statements separated by semicolons, in databases that do allow batch execution, this type of attack 
                    allows the attacker to execute arbitrary commands against the database.
                    Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to 
                    be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote 
                    left over from the modified query. In a database where comments are not allowed to be used in this way, the general 
                    attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string 
                    "name'); DELETE FROM items; SELECT \* FROM items WHERE 'a'='a", the following three valid statements will be created:
                        SELECT * FROM items
                        WHERE owner = 'hacker'
                        AND itemname = 'name';
                        DELETE FROM items;
                        SELECT * FROM items WHERE 'a'='a';

                    One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either 
                    accept only characters from an allow list of safe values or identify and escape a deny list of potentially malicious values. 
                    An allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements 
                    require less maintenance and can offer more guarantees with respect to security. As is almost always the case, deny listing is 
                    riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:
                        - Target fields that are not quoted Find ways to bypass the need for certain escaped meta-characters Use stored 
                        procedures to hide the injected meta-characters Manually escaping characters in input to SQL queries can help, 
                        but it will not make your application secure from SQL injection attacks.
                    
                        - Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although 
                        stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. For example, 
                        the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.

                        procedure get_item (
                            itm_cv IN OUT ItmCurTyp,
                            usr in varchar2,
                            itm in varchar2)
                        is
                        open itm_cv for ' SELECT * FROM items WHERE ' ||
                                'owner = '''|| usr ||
                                ' AND itemname = ''' || itm || '''';
                        end get_item;

                        Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be 
                        passed to their parameters. However, there are many ways around the limitations and many interesting statements 
                        that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will 
                        not make your application secure against SQL injection attacks.

 

 
# -------------------------------   end SQLi overview ------------------------------- # 
