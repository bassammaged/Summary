# ----------------------- start encoding overview ----------------------- #
    - What is encoding?
        Encoding is the process of converting data from one form to another for specific purpose, such as: UTF-8, HTML5
    - What is character set?
        Is mapping all characters to digits, such as: unicode, ascii

    | Note: Unicode is a character set where characters are mapped to code points (unique integers), 
            and we need something to translate these code points data into bytes. That's where UTF-8 comes in so called encoding – simple!
            - Resource: https://www.w3.org/International/questions/qa-what-is-encoding
                        https://stackoverflow.com/questions/496321/utf-8-utf-16-and-utf-32
                        https://stackoverflow.com/questions/643694/what-is-the-difference-between-utf-8-and-unicode
# -----------------------   end encoding overview ----------------------- #

# ----------------------- start URL encoding ----------------------- #
    - URL sent over the iinternet must contain characters in the range of the US-ASCII code
    character set. if unsafe characters are present in a URL, encoding them is requried.
    
    - Replaces characters outside the allowed set with a "%" followed by the two hexadecimal digits
    representing the numeric value of the octet.

    - example:
        - #         -->     %23 
        - %         -->     %25 
        - [space]   -->     %20 or + 
# -----------------------   end URL encoding ----------------------- #


# ----------------------- start HTML encoding ----------------------- #
    - HTML encoding could be as the following:
        - Named entity          & + named character references + ;          &lt;
        - Numeric Decimal       & + # + D + ;                               &#60;
        - Numeric Hexdecimal    & + #x + H + ;                              &#x3c;
            - Numeric Decimal is case insensitive which means &#x3c; equal to &#x3C;

    | Note: specify the character encoding of the document sent thtough header Content-Type:text/html; charset=utf-8
            if Content-Type not specified and method was GET, default charset is ISO-8859-1
# -----------------------   end HTML encoding ----------------------- #

# ----------------------- start Base36 encoding ----------------------- #
    - base36 widely use for example: reddit, TinyURL.
    - it is the most compact, case-insensitive, alphanumeric numeral system using ASCII characters which contains all digits [0-9] and latin letter [A-Z]

    example: convert Base10 to Base36
                Base10 = XSS or XsS
                Base36 = 43804


# -----------------------   end Base36 encoding ----------------------- #


# ----------------------- start Base64 encoding ----------------------- #
    - widespeard binary-to-text encoding schema, it was designed to allow binary data to be represented as ASCII string text.
    - Composed of digits [0-9] and latin letter [Aa-Zz] for total of 64 values. to complete the character set to 64 are the plus (+)
    and slash (/) characters, (=) used for padding.

    - How Base64 works?
        - Divides the messages into groups of 6 bits and converts each group with the respective ASCII character.
        - encoding or decoding will run on every 3 blocks of message when last block not contain 3 bytes will add padding instead of empty bytes = or ==

    - Example:
        - we need to send "Hey" though internet, the problem is internet deal with a byte as 2 power 7, while computer deal with it as 2 power 8,
        so base64 created to handled that.
        - 1st: Mapping "Hey" with ASCII ==> 72 101 121
        - 2nd: convert ASCII to binary: 01001000 01100101 01111001
        - 3rd: divid binary to 6 bits : 010010 000110 010101 111001
        - 4rd: convert each group to decimal: 18 6 32 57
        - 5th: using base64 index table for mapping: SGV5
        so "Hey" will be SGV5 
# -----------------------   end Base64 encoding ----------------------- #

# ----------------------- start unicode  ----------------------- #
    - three ways to map unicode character points:
        UTF-8, UTF-16, UTF-32
    - Example
        Character   unicode       UTF-8       UTF-16      UTF-32
        I            u+0049         49         0049      00000049
        ♥            u+2665      E2 99 A5      2665      00002665
# -----------------------   end unicode  ----------------------- # 